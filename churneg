#read data
data=read.csv("datasubset.csv")

#preview data
head(data)
attach(data)
str(data)

data=as.data.frame(lapply(data,as.numeric))
data$churn=as.factor(data$churn)

#class labels
feature.names=names(data)

for (f in feature.names) {
 if (class(data[[f]])=="factor") {
   levels <- unique(c(data[[f]]))
   data[[f]] <- factor(data[[f]],
   labels=make.names(levels))
 }
}
#prepare training and testing dataset
set.seed(1223)
ind <- sample(2,nrow(data),replace = TRUE, prob = c(0.7,0.3))
train <- data[ind==1,2:20]
test <- data[ind==2, 2:20]
xtrain <- train[,-1]
ytrain <- train$churn
xtest <- test[,-1]
ytest<- test$churn
x <- cbind(xtrain,ytrain)


fitControl <- trainControl(method = "repeatedcv",
                          number = 10,
                          repeats = 2,
                          classProbs = TRUE,
                          summaryFunction = twoClassSummary)

#Random Forests
model.rf <- train(as.factor(churn) ~ ., data = train,
                 method = "rf",
                 trControl = fitControl,
                 verbose = FALSE,
                 tuneGrid = data.frame(mtry=2),
                 metric = "ROC")
#Gradient Boosting
model.gbm <- train(as.factor(churn) ~ ., data = train,
                  method = "gbm",
                  trControl = fitControl,
                  metric = "ROC",
                  verbose = FALSE)
#Lasso Logistic
glmnetGrid <- expand.grid(.alpha = c(0.05, 0.1, 0.15, 0.2, 0.4, 0.6, 0.8, 1),
                         .lambda = seq(0.0, 0.2, length = 11))

model.lglm <- train(as.factor(churn) ~ ., data = train,
                   method = "glmnet",
                   tuneGrid = glmnetGrid,
                   trControl = fitControl,
                   metric = "ROC")
#Logistic
model.glm <- train(as.factor(churn) ~ ., data = train,
                  method = "glm",
                  trControl = fitControl,
                  metric = "ROC")

# Support vector machine model
model.svm= train(churn ~ .,
                data = train,
                method = "svmRadial",
                metric = "ROC",
                trControl = fitControl)

# R Part Trees Model
model.rpart= train(churn ~ .,
                  data = train,
                  method = "rpart",
                  metric = "ROC",
                  trControl = fitControl)

r = resamples(list(gbm=model.gbm,rf=model.rf,glm=model.glm,las=model.lglm,svm=model.svm,rpart=model.rpart))
summary(r)
modelNames = rep(NA, 3) 
propChurn = rep(NA, 3) 


modelTesting <- function(model, test, n=200, type="prob")
{
 pr.class = predict(model, test)
 pr.prob = predict(model, newdata=test, type=type)
modelTesting <- function(model, test, n=200, type="prob")
{
 pr.class = predict(model, test)
 pr.prob = predict(model, newdata=test, type=type)
 cf <- confusionMatrix(pr.class, test$churn)
 testp <- cbind(test,preChurn = pr.prob[,2])
 testp$class1 <- ifelse(testp$preChurn>.5,1,0) 
 tests <- testp[with(testp, order(-preChurn)),]
 topN = n
 top <- tests[1:topN,]
 topTable = table(top$churn, top$class1)
 topChurnProp = table(top$churn)[2]/nrow(top)
 output = list(cf=cf, top=top, pr.prob=pr.prob, topChurnProp=topChurnProp, topTable=topTable)
 return (output)
}

#make test set ALL completed
#test$churn <- rep(0,nrow(test))
# pr.class = predict(model.rf, newdata=xtest)
# pr.prob = predict(model.rf, newdata=xtest, type="prob")
# confusionMatrix(data = pr.class, reference = ytest)

n=300
testResult = modelTesting(model.rf,test,n)
modelNames[1] = "RF"
propChurn[1] = testResult$topChurnProp
testResult$cf
rfpred = testResult$pr.prob[,2]

testResult = modelTesting(model.gbm,test,n)
modelNames[2] = "GBM"; propChurn[2] = testResult$topChurnProp
gbmpred = testResult$pr.prob[,2]
testResult$cf

testResult = modelTesting(model.glm,test,n)
modelNames[3] = "GLM"; propChurn[3] = testResult$topChurnProp
glmpred = testResult$pr.prob[,2]
testResult$cf

testResult = modelTesting(model.lglm,test,n)
modelNames[4] = "LAS"; propChurn[4] = testResult$topChurnProp
laspred = testResult$pr.prob[,2]
testResult$cf

testResult = modelTesting(model.svm,test,n)
modelNames[5] = "SVM"; propChurn[5] = testResult$topChurnProp
laspred = testResult$pr.prob[,2]
testResult$cf

testResult = modelTesting(model.rpart,test,n)
modelNames[6] = "DTREE"; propChurn[6] = testResult$topChurnProp
laspred = testResult$pr.prob[,2]
testResult$cf

#compare all against top n class error
paste("Top",n,"Churn Prop using models")
data.frame(model=modelNames,topChurnProp=propChurn)11:40 AM
